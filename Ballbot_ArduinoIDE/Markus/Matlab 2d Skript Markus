% TODO
% 1. werden abweichungen vom AP betrachtet?!
% 2. Ist das M wirklich einfach T_x ?
% 3. In der Beschreibung steht es wurde Taylor expension genutzt nicht
% Jacobian!

%% Clean-up Workspace
clc;
clear all;

%% Load Params from UNS:

%Massen [kg]
m_K = 0.326;  % Ball mass (yellow)
m_W = 0.134*3;  % Mass of virtual actuating wheel: one wheel:= Mass of omni_wheel + mass_motor + mass_mitnehmer for three wheels.
m_A = 1.603;  % Mass of body

%Radien und Längen [m]
r_K = 0.08;   % Radius of Ball
r_W = 0.03;   % Radius of omni wheels
r_A = 0.0703; % Radius of the body (Zylinder)
l = 0.236;     % Height of the Ball middle point to the center of gravity
h = 0.353     % Height from Ball middle point to top Note that the balls middle point has to be the same point as the intersection point of the three diagonal lines which start at the omniwheels contact point.

%Allgemeine Konstanten
g=9.81;      % [m/s^2]
i=353;       % Gear ratio see in datasheet.

%Winkel [rad]
alpha = pi/4;
beta = 0;


%Trägheitsmomente [kg m^2] See page 15.
Theta_K = 0.00139093;     %[I_s] Inertia of the Ball (J=2/3 m r^2 for spherical shell, see: http://hyperphysics.phy-astr.gsu.edu/hbase/isph.html)
Theta_M = 0.38*10^(-7)       % real motor inertia| We use cik coreless dc motor: A 17-B-16- see here: http://cik-ele.com/en/motor/category/product/?c2_id=2&c3_id=7&c4_id=23 in particular this link: http://cik-ele.com/en/motor/category/product/35.pdf
Theta_OW = 0.5*0.03^2*0.052 % Inertia of omniwheel Theta_OW = 0.5*r_omni^2*m_OMNI
Theta_W = 3/2*(cos(alpha))^2*(Theta_OW+i^2*Theta_M); %[I_w] Inertia of the actuating wheel yz xz plane
Theta_A = 0.088;            % [I_B] Inertia of the body(Aufbau und Räder also alles!)
Theta_Axy = 0.007;         % Inertia of the body in xy plane
Theta_Wxy = 3*(Theta_OW+i^2*Theta_M); % Inertia of the actuating wheel in xy plane

%% Set Working and Starting Points
% Arbeitspunkte
x_AP = [0 0 0 0];
u_AP = 0;
T_x_AP = 0;
T_y_AP = 0;
T_z_AP = 0;

% Anfangsbedingungen
x_0_yz =[0 0 0 0];
x_0_xz =[0 0 0 0];
x_0_xy =[0 0 0 0];

%% Introduce Symbols:
syms theta_x theta_x_dot phi_x phi_x_dot T_x

%% Plane XZ- Initialisierung der Massenträgheitsmatrix, Gravitations- und Coriolismatrix
% The model xz, yz are basically the same !

%Substitutionen
m_tot=m_K+m_A+m_W;  %P. 12
r_tot=r_K+r_W;
gamma=l*m_A+(r_K+r_W)*m_W;

%M*ddq + C + G = f_NP P.61
M_x=[m_tot*(r_K)^2+Theta_K+(r_K/r_W)^2*Theta_W, -(r_K/(r_W)^2)*r_tot*Theta_W+gamma*r_K*cos(theta_x);
     -(r_K/(r_W)^2)*r_tot*Theta_W+gamma*r_K*cos(theta_x), ((r_tot)^2/(r_W)^2)*Theta_W+Theta_A+m_A*l^2+m_W*(r_tot)^2];

C_x=[-r_K*gamma*sin(theta_x)*(theta_x_dot)^2; 0];

G_x=[0; -g*sin(theta_x)*gamma];

f_NP1_xz=[(r_K/r_W)*T_x; -(1+(r_K/r_W))*T_x];
f_NP2_xz=[0; T_x];
f_NP_xz=f_NP1_xz+f_NP2_xz;

%% Plane XZ - Nichtlineares System
q_xz_dot=[phi_x_dot;  theta_x_dot];

f_xz = [q_xz_dot; inv(M_x)*(f_NP_xz-(C_x+G_x))];


 %% Plane YZ - Linearisierung
f_0 = double(subs(f_xz, [phi_x, theta_x, phi_x_dot, theta_x_dot, T_x], [0 0 0 0 0]))

A_xz_tmp=jacobian(f_xz, [phi_x, theta_x, phi_x_dot, theta_x_dot]);
A_xz = double(subs(A_xz_tmp,[phi_x, theta_x, phi_x_dot, theta_x_dot], x_AP))
% Verhältnis ist -1.704 im ETHZ: -1.926

B_xz_tmp=jacobian(f_xz,T_x);
B_xz = double(subs(B_xz_tmp,[phi_x, theta_x, phi_x_dot, theta_x_dot], x_AP))

C_xz = [1 1 1 1];
D_xz = [0;0;0;0];

[u v] = eig(A_xz)

%% LQR Design: dot(x) = [phi_x, theta_x, phi_x_dot, theta_x_dot]
Q_xz = [20 0 0 0;
        0 100 0 0;
        0 0 10 0;
        0 0 0 50];
 R_xz = 200;


 [K_xz, S_xz, lamda_xz_closed] = lqr(A_xz, B_xz, Q_xz, R_xz)

 %% Vorfilter:
 F = - inv(C_xz*inv(A_xz-B_xz*K_xz)*B_xz)

